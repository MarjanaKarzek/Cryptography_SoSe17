package chapter2;

import java.util.ArrayList;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/**
 * Basic symmetric encryption example
 * 
 * edited by Marjana Karzek
 * 
 * This class is based on the SimpleSymmetricExample from Hook Chapter 2. Its
 * components are configured to the standards that were used at the 23.11.2016.
 * 
 * The class provides the functionality to encrypt and decrypt messages with
 * AES/ECB/NoPadding and SunJCE.
 */
public class SimpleSymmetricExample {
	public static void main(String[] args) throws Exception {
		final int NUMBER_OF_GROUPS = 11;

		ArrayList<byte[]> keyBytes = new ArrayList<byte[]>();
		ArrayList<byte[]> inputs = new ArrayList<byte[]>();
		String[] groups = new String[NUMBER_OF_GROUPS];

		// Group 1
		byte[] keyBytes1 = new byte[] { (byte) 0x87, 0x38, 0x76, (byte) 0xf8, 0x76, 0x46, (byte) 0xd5, (byte) 0x6f,
				0x59, (byte) 0x6f, 0x22, 0x62, (byte) 0x85, 0x69, 0x50, (byte) 0xe9, (byte) 0xf7, (byte) 0x80,
				(byte) 0x1f, (byte) 0xe1, 0x53, (byte) 0x7e, 0x54, (byte) 0xbd };
		groups[0] = "Group 1";

		// Group 2
		byte[] keyBytes2 = new byte[] { (byte) 0xf6, (byte) 0x92, (byte) 0x5f, (byte) 0x9d, 0x57, (byte) 0xca, 0x01,
				(byte) 0xa5, 0x74, 0x55, (byte) 0x9a, (byte) 0x7b, 0x15, (byte) 0x97, (byte) 0xfa, (byte) 0x84, 0x61,
				(byte) 0xd6, 0x44, (byte) 0x95, (byte) 0xfc, 0x68, (byte) 0x5a, (byte) 0xa0 };
		groups[1] = "Group 2";

		// Group 3
		byte[] keyBytes3 = new byte[] { (byte) 0xdd, (byte) 0xe4, 0x17, (byte) 0xbe, (byte) 0xe7, 0x55, 0x75,
				(byte) 0x6e, 0x52, (byte) 0x96, 0x58, (byte) 0x2b, 0x56, (byte) 0x8d, (byte) 0xff, (byte) 0xdc, 0x44,
				0x54, 0x19, (byte) 0x2e, (byte) 0x7a, (byte) 0xed, 0x41, (byte) 0x6f };
		groups[2] = "Group 2";

		// Group 4
		byte[] keyBytes4 = new byte[] { 0x45, 0x15, (byte) 0x3a, (byte) 0xaf, (byte) 0x7c, (byte) 0x6c, (byte) 0x71,
				(byte) 0x6a, (byte) 0x49, (byte) 0xf5, (byte) 0xc7, (byte) 0xc8, (byte) 0xbf, (byte) 0x8a, (byte) 0x15,
				(byte) 0x69, (byte) 0xeb, (byte) 0xd4, (byte) 0x4f, (byte) 0xbd, (byte) 0x88, (byte) 0x76, (byte) 0x4c,
				(byte) 0x54 };
		groups[3] = "Group 4";

		// Group 5
		byte[] keyBytes5 = new byte[] { (byte) 0xad, (byte) 0xb6, (byte) 0xe1, (byte) 0xc8, (byte) 0xc0, (byte) 0x59,
				(byte) 0xee, (byte) 0x35, (byte) 0xcc, (byte) 0x80, (byte) 0x57, (byte) 0x72, (byte) 0xa0, (byte) 0x18,
				(byte) 0xf6, (byte) 0xeb, (byte) 0x4e, (byte) 0xf1, (byte) 0x15, (byte) 0x19, (byte) 0x8e, (byte) 0x4e,
				(byte) 0x37, (byte) 0xe1 };
		groups[4] = "Group 5";

		// Group 6
		byte[] keyBytes6 = new byte[] { (byte) 0x61, (byte) 0xa1, (byte) 0x20, (byte) 0x1e, (byte) 0xb7, (byte) 0x04,
				(byte) 0x61, (byte) 0xfc, (byte) 0xd5, (byte) 0xdf, (byte) 0x8e, (byte) 0x32, (byte) 0xa4, (byte) 0x9c,
				(byte) 0x3e, (byte) 0x71, (byte) 0xdd, (byte) 0x88, (byte) 0x17, (byte) 0x50, (byte) 0x45, (byte) 0x91,
				(byte) 0x14, (byte) 0xf1 };
		groups[5] = "Group 6";

		// Group 7
		byte[] keyBytes7 = new byte[] { (byte) 0xa5, (byte) 0x54, (byte) 0xd6, (byte) 0x2f, (byte) 0xca, (byte) 0xb3,
				(byte) 0xfd, (byte) 0xea, (byte) 0x9a, (byte) 0xb9, (byte) 0xa5, (byte) 0xc2, (byte) 0xa3, (byte) 0x88,
				(byte) 0x22, (byte) 0xfe, (byte) 0xc6, (byte) 0x00, (byte) 0x86, (byte) 0xee, (byte) 0xed, (byte) 0xab,
				(byte) 0xb2, (byte) 0xeb };
		groups[6] = "Group 7";

		// Group 8
		byte[] keyBytes8 = new byte[] { (byte) 0x0f, (byte) 0x9a, (byte) 0xae, (byte) 0xa7, (byte) 0x19, (byte) 0x8f,
				(byte) 0x13, (byte) 0xfa, (byte) 0xba, (byte) 0x5e, (byte) 0xb3, (byte) 0xb7, (byte) 0x92, (byte) 0x75,
				(byte) 0x1a, (byte) 0x17, (byte) 0x50, (byte) 0xd8, (byte) 0xab, (byte) 0x9a, (byte) 0xa9, (byte) 0x11,
				(byte) 0x9d, (byte) 0x48 };
		groups[7] = "Group 8";

		// Group 9
		byte[] keyBytes9 = new byte[] { (byte) 0xd4, (byte) 0xbb, (byte) 0x96, (byte) 0x94, (byte) 0xc1, (byte) 0xd8,
				(byte) 0x96, (byte) 0xc6, (byte) 0xf0, (byte) 0x2a, (byte) 0x53, (byte) 0xdd, (byte) 0xbb, (byte) 0x60,
				(byte) 0xdd, (byte) 0xc6, (byte) 0x9d, (byte) 0x75, (byte) 0x34, (byte) 0xd2, (byte) 0x9d, (byte) 0xb6,
				(byte) 0xd0, (byte) 0xf8 };
		groups[8] = "Group 9";

		// Group 10
		byte[] keyBytes10 = new byte[] { (byte) 0xf1, (byte) 0xe2, (byte) 0xb3, (byte) 0x17, (byte) 0xe9, (byte) 0x75,
				(byte) 0x6d, (byte) 0xc3, (byte) 0x79, (byte) 0x2e, (byte) 0x62, (byte) 0x00, (byte) 0xe6, (byte) 0x98,
				(byte) 0x43, (byte) 0xbd, (byte) 0x43, (byte) 0xc7, (byte) 0xae, (byte) 0xaf, (byte) 0x78, (byte) 0x6c,
				(byte) 0x9f, (byte) 0xef };
		groups[9] = "Group 10";

		// Group 11
		byte[] keyBytes11 = new byte[] { (byte) 0xd1, (byte) 0xae, (byte) 0x18, (byte) 0x14, (byte) 0x32, (byte) 0x9b,
				(byte) 0x73, (byte) 0xe1, (byte) 0xdf, (byte) 0xe9, (byte) 0x9a, (byte) 0x00, (byte) 0x5e, (byte) 0x37,
				(byte) 0x82, (byte) 0x1b, (byte) 0x49, (byte) 0xce, (byte) 0x22, (byte) 0xe9, (byte) 0x3c, (byte) 0x0f,
				(byte) 0xd0, (byte) 0x37 };
		groups[10] = "Group 11";

		// fill ArrayList
		keyBytes.add(keyBytes1);
		keyBytes.add(keyBytes2);
		keyBytes.add(keyBytes3);
		keyBytes.add(keyBytes4);
		keyBytes.add(keyBytes5);
		keyBytes.add(keyBytes6);
		keyBytes.add(keyBytes7);
		keyBytes.add(keyBytes8);
		keyBytes.add(keyBytes9);
		keyBytes.add(keyBytes10);
		keyBytes.add(keyBytes11);

		byte[] input1 = new byte[] { (byte) 0x4A, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x6C, (byte) 0x65,
				(byte) 0x20, (byte) 0x42, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x73, // 12
				(byte) 0x20, (byte) 0x6A, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x6C, (byte) 0x65, (byte) 0x20,
				(byte) 0x62, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x73, (byte) 0x20, // 14
				(byte) 0x6A, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x6C, (byte) 0x65, (byte) 0x20, (byte) 0x61,
				(byte) 0x6C, (byte) 0x6C, (byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x65, // 14
				(byte) 0x20, (byte) 0x77, (byte) 0x61, (byte) 0x79, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58 };
		byte[] input2 = new byte[] { (byte) 0x6F, (byte) 0x68, (byte) 0x20, (byte) 0x77, (byte) 0x68, (byte) 0x61,
				(byte) 0x74, (byte) 0x20, (byte) 0x66, (byte) 0x75, (byte) 0x6E, (byte) 0x20, (byte) 0x69, (byte) 0x74,
				(byte) 0x20, (byte) 0x69, (byte) 0x73, (byte) 0x20, (byte) 0x74, (byte) 0x6F, (byte) 0x20, (byte) 0x72,
				(byte) 0x69, (byte) 0x64, (byte) 0x65, (byte) 0x20, (byte) 0x69, (byte) 0x6E, (byte) 0x20, (byte) 0x61,
				(byte) 0x20, (byte) 0x6F, (byte) 0x6E, (byte) 0x65, (byte) 0x20, (byte) 0x68, (byte) 0x6F, (byte) 0x72,
				(byte) 0x73, (byte) 0x65, (byte) 0x20, (byte) 0x6F, (byte) 0x70, (byte) 0x65, (byte) 0x6E, (byte) 0x20,
				(byte) 0x73, (byte) 0x6C, (byte) 0x65, (byte) 0x69, (byte) 0x67, (byte) 0x68, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input3 = new byte[] { (byte) 0x44, (byte) 0x61, (byte) 0x73, (byte) 0x68, (byte) 0x69, (byte) 0x6E,
				(byte) 0x67, (byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x72, (byte) 0x6F, (byte) 0x75, (byte) 0x67,
				(byte) 0x68, (byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x65, (byte) 0x20, (byte) 0x73, (byte) 0x6E,
				(byte) 0x6F, (byte) 0x77, (byte) 0x20, (byte) 0x69, (byte) 0x6E, (byte) 0x20, (byte) 0x61, (byte) 0x20,
				(byte) 0x6F, (byte) 0x6E, (byte) 0x65, (byte) 0x20, (byte) 0x68, (byte) 0x6F, (byte) 0x72, (byte) 0x73,
				(byte) 0x65, (byte) 0x20, (byte) 0x6F, (byte) 0x70, (byte) 0x65, (byte) 0x6E, (byte) 0x20, (byte) 0x73,
				(byte) 0x6C, (byte) 0x65, (byte) 0x69, (byte) 0x67, (byte) 0x68, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input4 = new byte[] { (byte) 0x6F, (byte) 0x76, (byte) 0x65, (byte) 0x72, (byte) 0x20, (byte) 0x66,
				(byte) 0x69, (byte) 0x65, (byte) 0x6C, (byte) 0x64, (byte) 0x73, (byte) 0x20, (byte) 0x77, (byte) 0x65,
				(byte) 0x20, (byte) 0x67, (byte) 0x6F, (byte) 0x20, (byte) 0x6C, (byte) 0x61, (byte) 0x75, (byte) 0x67,
				(byte) 0x68, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x20, (byte) 0x61, (byte) 0x6C, (byte) 0x6C,
				(byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x65, (byte) 0x20, (byte) 0x77, (byte) 0x61, (byte) 0x79,
				(byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58, };
		byte[] input5 = new byte[] { (byte) 0x42, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x73, (byte) 0x20,
				(byte) 0x6F, (byte) 0x6E, (byte) 0x20, (byte) 0x62, (byte) 0x6F, (byte) 0x62, (byte) 0x74, (byte) 0x61,
				(byte) 0x69, (byte) 0x6C, (byte) 0x20, (byte) 0x72, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x20,
				(byte) 0x6D, (byte) 0x61, (byte) 0x6B, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x20, (byte) 0x73,
				(byte) 0x70, (byte) 0x69, (byte) 0x72, (byte) 0x69, (byte) 0x74, (byte) 0x73, (byte) 0x20, (byte) 0x62,
				(byte) 0x72, (byte) 0x69, (byte) 0x67, (byte) 0x68, (byte) 0x74, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input6 = new byte[] { (byte) 0x57, (byte) 0x68, (byte) 0x61, (byte) 0x74, (byte) 0x20, (byte) 0x66,
				(byte) 0x75, (byte) 0x6E, (byte) 0x20, (byte) 0x69, (byte) 0x74, (byte) 0x20, (byte) 0x69, (byte) 0x73,
				(byte) 0x20, (byte) 0x74, (byte) 0x6F, (byte) 0x20, (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x65,
				(byte) 0x20, (byte) 0x61, (byte) 0x6E, (byte) 0x64, (byte) 0x20, (byte) 0x73, (byte) 0x69, (byte) 0x6E,
				(byte) 0x67, (byte) 0x20, (byte) 0x61, (byte) 0x20, (byte) 0x73, (byte) 0x6C, (byte) 0x65, (byte) 0x69,
				(byte) 0x67, (byte) 0x68, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x20, (byte) 0x73, (byte) 0x6F,
				(byte) 0x6E, (byte) 0x67, (byte) 0x20, (byte) 0x74, (byte) 0x6F, (byte) 0x6E, (byte) 0x69, (byte) 0x67,
				(byte) 0x68, (byte) 0x74, (byte) 0x20, (byte) 0x4F, (byte) 0x68, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input7 = new byte[] { (byte) 0x4A, (byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x6C, (byte) 0x65,
				(byte) 0x20, (byte) 0x42, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x73, (byte) 0x20, (byte) 0x6A,
				(byte) 0x69, (byte) 0x6E, (byte) 0x67, (byte) 0x6C, (byte) 0x65, (byte) 0x20, (byte) 0x62, (byte) 0x65,
				(byte) 0x6C, (byte) 0x6C, (byte) 0x73, (byte) 0x20, (byte) 0x6A, (byte) 0x69, (byte) 0x6E, (byte) 0x67,
				(byte) 0x6C, (byte) 0x65, (byte) 0x20, (byte) 0x61, (byte) 0x6C, (byte) 0x6C, (byte) 0x20, (byte) 0x74,
				(byte) 0x68, (byte) 0x65, (byte) 0x20, (byte) 0x77, (byte) 0x61, (byte) 0x79, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input8 = new byte[] { (byte) 0x6F, (byte) 0x68, (byte) 0x20, (byte) 0x77, (byte) 0x68, (byte) 0x61,
				(byte) 0x74, (byte) 0x20, (byte) 0x66, (byte) 0x75, (byte) 0x6E, (byte) 0x20, (byte) 0x69, (byte) 0x74,
				(byte) 0x20, (byte) 0x69, (byte) 0x73, (byte) 0x20, (byte) 0x74, (byte) 0x6F, (byte) 0x20, (byte) 0x72,
				(byte) 0x69, (byte) 0x64, (byte) 0x65, (byte) 0x20, (byte) 0x69, (byte) 0x6E, (byte) 0x20, (byte) 0x61,
				(byte) 0x20, (byte) 0x6F, (byte) 0x6E, (byte) 0x65, (byte) 0x20, (byte) 0x68, (byte) 0x6F, (byte) 0x72,
				(byte) 0x73, (byte) 0x65, (byte) 0x20, (byte) 0x6F, (byte) 0x70, (byte) 0x65, (byte) 0x6E, (byte) 0x20,
				(byte) 0x73, (byte) 0x6C, (byte) 0x65, (byte) 0x69, (byte) 0x67, (byte) 0x68, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input9 = new byte[] { (byte) 0x41, (byte) 0x20, (byte) 0x64, (byte) 0x61, (byte) 0x79, (byte) 0x20,
				(byte) 0x6F, (byte) 0x72, (byte) 0x20, (byte) 0x74, (byte) 0x77, (byte) 0x6F, (byte) 0x20, (byte) 0x61,
				(byte) 0x67, (byte) 0x6F, (byte) 0x20, (byte) 0x49, (byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x6F,
				(byte) 0x75, (byte) 0x67, (byte) 0x68, (byte) 0x74, (byte) 0x20, (byte) 0x49, (byte) 0x20, (byte) 0x64,
				(byte) 0x20, (byte) 0x74, (byte) 0x61, (byte) 0x6B, (byte) 0x65, (byte) 0x20, (byte) 0x61, (byte) 0x20,
				(byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x65, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };
		byte[] input10 = new byte[] { (byte) 0x61, (byte) 0x6E, (byte) 0x64, (byte) 0x20, (byte) 0x73, (byte) 0x6F,
				(byte) 0x6F, (byte) 0x6E, (byte) 0x20, (byte) 0x4D, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x20,
				(byte) 0x46, (byte) 0x61, (byte) 0x6E, (byte) 0x6E, (byte) 0x79, (byte) 0x20, (byte) 0x42, (byte) 0x72,
				(byte) 0x69, (byte) 0x67, (byte) 0x68, (byte) 0x74, (byte) 0x20, (byte) 0x77, (byte) 0x61, (byte) 0x73,
				(byte) 0x20, (byte) 0x73, (byte) 0x65, (byte) 0x61, (byte) 0x74, (byte) 0x65, (byte) 0x64, (byte) 0x20,
				(byte) 0x62, (byte) 0x79, (byte) 0x20, (byte) 0x6D, (byte) 0x79, (byte) 0x20, (byte) 0x73, (byte) 0x69,
				(byte) 0x64, (byte) 0x65 };
		byte[] input11 = new byte[] { (byte) 0x54, (byte) 0x68, (byte) 0x65, (byte) 0x20, (byte) 0x68, (byte) 0x6F,
				(byte) 0x72, (byte) 0x73, (byte) 0x65, (byte) 0x20, (byte) 0x77, (byte) 0x61, (byte) 0x73, (byte) 0x20,
				(byte) 0x6C, (byte) 0x65, (byte) 0x61, (byte) 0x6E, (byte) 0x20, (byte) 0x61, (byte) 0x6E, (byte) 0x64,
				(byte) 0x20, (byte) 0x6C, (byte) 0x61, (byte) 0x6E, (byte) 0x6B, (byte) 0x2C, (byte) 0x20, (byte) 0x6D,
				(byte) 0x69, (byte) 0x73, (byte) 0x66, (byte) 0x6F, (byte) 0x72, (byte) 0x74, (byte) 0x75, (byte) 0x6E,
				(byte) 0x65, (byte) 0x20, (byte) 0x73, (byte) 0x65, (byte) 0x65, (byte) 0x6D, (byte) 0x65, (byte) 0x64,
				(byte) 0x20, (byte) 0x68, (byte) 0x69, (byte) 0x73, (byte) 0x20, (byte) 0x6C, (byte) 0x6F, (byte) 0x74,
				(byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58, (byte) 0x58,
				(byte) 0x58, (byte) 0x58 };

		// add inputs
		inputs.add(input1);
		inputs.add(input2);
		inputs.add(input3);
		inputs.add(input4);
		inputs.add(input5);
		inputs.add(input6);
		inputs.add(input7);
		inputs.add(input8);
		inputs.add(input9);
		inputs.add(input10);
		inputs.add(input11);

		SecretKeySpec[] keys = new SecretKeySpec[NUMBER_OF_GROUPS];

		for (int i = 0; i < keyBytes.size(); i++) {
			keys[i] = new SecretKeySpec(keyBytes.get(i), "AES");
		}

		Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding", "SunJCE");

		int ctLength = 0;
		int ptLength = 0;
		for (int i = 0; i < keyBytes.size(); i++) {
			// encryption pass
			byte[] cipherText = new byte[inputs.get(i).length];
			cipher.init(Cipher.ENCRYPT_MODE, keys[i]);
			ctLength = cipher.update(inputs.get(i), 0, inputs.get(i).length, cipherText, 0);
			ctLength += cipher.doFinal(cipherText, ctLength);
			System.out.println("cipher text for " + groups[i] + ": " + Utils.toHex(cipherText));

			// decryption pass
			byte[] plainText = new byte[ctLength];
			cipher.init(Cipher.DECRYPT_MODE, keys[i]);
			ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);
			ptLength += cipher.doFinal(plainText, ptLength);
			System.out.println("plain text : " + Utils.toHex(plainText));
			System.out.println();
		}

		ArrayList<byte[]> decodeKeyBytes = new ArrayList<byte[]>();
		ArrayList<byte[]> cipherTexts = new ArrayList<byte[]>();

		// Group 1
		byte[] decodeKeyBytes1 = new byte[] { (byte) 0xf5, (byte) 0x9a, (byte) 0x2c, (byte) 0xa4, (byte) 0x97,
				(byte) 0x14, (byte) 0xec, (byte) 0x31, (byte) 0xd4, (byte) 0x3c, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		// Group 2
		byte[] decodeKeyBytes2 = new byte[] { (byte) 0x6c, (byte) 0x69, (byte) 0x72, (byte) 0x75, (byte) 0x6d,
				(byte) 0x6c, (byte) 0x61, (byte) 0x72, (byte) 0x75, (byte) 0x6d, (byte) 0x6c, (byte) 0xc3, (byte) 0xb6,
				(byte) 0x66, (byte) 0x66, (byte) 0x65, (byte) 0x6c, (byte) 0x73, (byte) 0x74, (byte) 0x69, (byte) 0x65,
				(byte) 0x6c, (byte) 0x64, (byte) 0x75, (byte) 0x62, (byte) 0x69, (byte) 0x73, (byte) 0x64, (byte) 0x6f,
				(byte) 0x6f, (byte) 0x66, (byte) 0x66 };

		// Group 3
		byte[] decodeKeyBytes3 = new byte[] { (byte) 0x9b, (byte) 0xf5, (byte) 0xbe, (byte) 0xee, (byte) 0x97,
				(byte) 0x3f, (byte) 0xeb, (byte) 0xc4, (byte) 0x28, (byte) 0x93, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		// Group 4
		byte[] decodeKeyBytes4 = new byte[] { (byte) 0xfd, (byte) 0x2b, (byte) 0x5e, (byte) 0xd6, (byte) 0x43,
				(byte) 0xdb, (byte) 0x3c, (byte) 0xe8, (byte) 0xfd, (byte) 0x2b, (byte) 0x5e, (byte) 0xd6, (byte) 0x43,
				(byte) 0xdb, (byte) 0x3c, (byte) 0xe8 };

		// Group 5
		byte[] decodeKeyBytes5 = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		// Group 6
		byte[] decodeKeyBytes6 = new byte[] { (byte) 0x5b, (byte) 0x3d, (byte) 0x91, (byte) 0x40, (byte) 0x2e,
				(byte) 0xe2, (byte) 0xf3, (byte) 0xfe, (byte) 0x80, (byte) 0xdd, (byte) 0xe0, (byte) 0xf2, (byte) 0x64,
				(byte) 0x9a, (byte) 0x9d, (byte) 0xf5, (byte) 0x73, (byte) 0xfc, (byte) 0x4b, (byte) 0x76, (byte) 0xda,
				(byte) 0xe8, (byte) 0xf1, (byte) 0xa4 };

		// Group 7
		byte[] decodeKeyBytes7 = new byte[] { (byte) 0x43, (byte) 0x94, (byte) 0x8e, (byte) 0xb1, (byte) 0x3a,
				(byte) 0x8b, (byte) 0x32, (byte) 0x93, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		// Group 8
		byte[] decodeKeyBytes8 = new byte[] { (byte) 0x78, (byte) 0x65, (byte) 0x6c, (byte) 0x73, (byte) 0x65,
				(byte) 0x7a, (byte) 0x6f, (byte) 0x64, (byte) 0x78, (byte) 0x65, (byte) 0x6c, (byte) 0x73, (byte) 0x65,
				(byte) 0x7a, (byte) 0x6f, (byte) 0x64 };

		// Group 9
		byte[] decodeKeyBytes9 = new byte[] { (byte) 0x90, (byte) 0xb2, (byte) 0x0a, (byte) 0xbe, (byte) 0xce,
				(byte) 0x9b, (byte) 0x06, (byte) 0xdd, (byte) 0x0e, (byte) 0x48, (byte) 0x14, (byte) 0xd3, (byte) 0x4d,
				(byte) 0x5c, (byte) 0xe9, (byte) 0xa8, (byte) 0xa8, (byte) 0x7c, (byte) 0x7a, (byte) 0x5f, (byte) 0xeb,
				(byte) 0x87, (byte) 0x33, (byte) 0x28, (byte) 0xfd, (byte) 0x68, (byte) 0xc6, (byte) 0x44, (byte) 0xd2,
				(byte) 0x80, (byte) 0x33, (byte) 0x13 };

		// Group 10
		byte[] decodeKeyBytes10 = new byte[] { (byte) 0x62, (byte) 0x31, (byte) 0x6c, (byte) 0x32, (byte) 0x6f,
				(byte) 0x33, (byte) 0x77, (byte) 0x34, (byte) 0x66, (byte) 0x35, (byte) 0x69, (byte) 0x73, (byte) 0x68,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		// Group 11
		byte[] decodeKeyBytes11 = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00 };

		decodeKeyBytes.add(decodeKeyBytes1);
		decodeKeyBytes.add(decodeKeyBytes2);
		decodeKeyBytes.add(decodeKeyBytes3);
		decodeKeyBytes.add(decodeKeyBytes4);
		decodeKeyBytes.add(decodeKeyBytes5);
		decodeKeyBytes.add(decodeKeyBytes6);
		decodeKeyBytes.add(decodeKeyBytes7);
		decodeKeyBytes.add(decodeKeyBytes8);
		decodeKeyBytes.add(decodeKeyBytes9);
		decodeKeyBytes.add(decodeKeyBytes10);
		decodeKeyBytes.add(decodeKeyBytes11);

		// Group 1
		byte[] cipher1 = new byte[] { (byte) 0xC3, (byte) 0x35, (byte) 0x9B, (byte) 0xAE, (byte) 0xE0, (byte) 0x74,
				(byte) 0xCB, (byte) 0xF6, (byte) 0xB8, (byte) 0x63, (byte) 0x81, (byte) 0xC3, (byte) 0xA0, (byte) 0x71,
				(byte) 0xC5, (byte) 0xC4, (byte) 0x56, (byte) 0x9C, (byte) 0xC8, (byte) 0x76, (byte) 0xF3, (byte) 0x55,
				(byte) 0xFA, (byte) 0x94, (byte) 0xB1, (byte) 0x48, (byte) 0x56, (byte) 0xA6, (byte) 0x9D, (byte) 0x05,
				(byte) 0x08, (byte) 0x78 };

		// Group 2
		byte[] cipher2 = new byte[] { (byte) 0x44, (byte) 0xed, (byte) 0x90, (byte) 0x05, (byte) 0x4f, (byte) 0x65,
				(byte) 0xdf, (byte) 0x1c, (byte) 0x08, (byte) 0x98, (byte) 0xfb, (byte) 0xb5, (byte) 0x27, (byte) 0x5a,
				(byte) 0xf2, (byte) 0x1d, (byte) 0x69, (byte) 0xf7, (byte) 0x40, (byte) 0x8c, (byte) 0xd7, (byte) 0x9c,
				(byte) 0x15, (byte) 0x3c, (byte) 0xd0, (byte) 0x9e, (byte) 0xaf, (byte) 0x30, (byte) 0x5e, (byte) 0x14,
				(byte) 0xf1, (byte) 0xf1 };

		// Group 3
		byte[] cipher3 = new byte[] { (byte) 0xda, (byte) 0xca, (byte) 0x20, (byte) 0x48, (byte) 0x5b, (byte) 0xb0,
				(byte) 0x9f, (byte) 0x3f, (byte) 0x15, (byte) 0x62, (byte) 0xac, (byte) 0x07, (byte) 0x10, (byte) 0xb5,
				(byte) 0x3e, (byte) 0xa7, (byte) 0xf1, (byte) 0x3e, (byte) 0x76, (byte) 0x91, (byte) 0xb9, (byte) 0x50,
				(byte) 0xc2, (byte) 0xb0, (byte) 0x0f, (byte) 0xc2, (byte) 0xc7, (byte) 0xb8, (byte) 0xd6, (byte) 0x7a,
				(byte) 0x42, (byte) 0x8d, (byte) 0x80, (byte) 0xc9, (byte) 0xa6, (byte) 0x77, (byte) 0xf9, (byte) 0xa3,
				(byte) 0x27, (byte) 0x78, (byte) 0x00, (byte) 0x7b, (byte) 0xbb, (byte) 0x93, (byte) 0x57, (byte) 0x37,
				(byte) 0xd7, (byte) 0x3a };

		// Group 4
		byte[] cipher4 = new byte[] { (byte) 0x6d, (byte) 0x79, (byte) 0x65, (byte) 0x40, (byte) 0xd6, (byte) 0x34,
				(byte) 0x9d, (byte) 0xd9, (byte) 0x93, (byte) 0xfb, (byte) 0x7e, (byte) 0x5f, (byte) 0x8e, (byte) 0x67,
				(byte) 0x16, (byte) 0xd6, (byte) 0xd6, (byte) 0x22, (byte) 0x0d, (byte) 0xa9, (byte) 0x49, (byte) 0x69,
				(byte) 0x39, (byte) 0xae, (byte) 0xb3, (byte) 0xf1, (byte) 0x92, (byte) 0x5b, (byte) 0x80, (byte) 0xc1,
				(byte) 0x5b, (byte) 0xb9 };

		// Group 5
		byte[] cipher5 = new byte[] { (byte) 0xbe, (byte) 0xd5, (byte) 0xe6, (byte) 0x11, (byte) 0x73, (byte) 0x5d,
				(byte) 0xe1, (byte) 0xe9, (byte) 0x01, (byte) 0xd9, (byte) 0xd5, (byte) 0x1d, (byte) 0x28, (byte) 0xd3,
				(byte) 0x9e, (byte) 0xd6, (byte) 0xa3, (byte) 0xdf, (byte) 0xc8, (byte) 0xbd, (byte) 0xbc, (byte) 0xa8,
				(byte) 0x30, (byte) 0x1b, (byte) 0xb8, (byte) 0x9b, (byte) 0x4e, (byte) 0x2b, (byte) 0x15, (byte) 0xd1,
				(byte) 0x75, (byte) 0x66, (byte) 0xc8, (byte) 0x87, (byte) 0xae, (byte) 0x67, (byte) 0xd9, (byte) 0x91,
				(byte) 0x92, (byte) 0x21, (byte) 0xe5, (byte) 0x37, (byte) 0xd3, (byte) 0x78, (byte) 0xf1, (byte) 0x8b,
				(byte) 0x87, (byte) 0xc8, (byte) 0xd2, (byte) 0x99, (byte) 0x93, (byte) 0xaa, (byte) 0x24, (byte) 0x86,
				(byte) 0x5d, (byte) 0x27, (byte) 0x14, (byte) 0xd9, (byte) 0x32, (byte) 0x00, (byte) 0x40, (byte) 0xa8,
				(byte) 0xb5, (byte) 0xfd, (byte) 0x2a, (byte) 0x00, (byte) 0x70, (byte) 0x03, (byte) 0x62, (byte) 0x25,
				(byte) 0x76, (byte) 0x80, (byte) 0xf4, (byte) 0x46, (byte) 0x8c, (byte) 0x49, (byte) 0xdb, (byte) 0x47,
				(byte) 0x4d, (byte) 0x90 };

		// Group 6
		byte[] cipher6 = new byte[] { (byte) 0x5c, (byte) 0x67, (byte) 0xd4, (byte) 0x09, (byte) 0x4a, (byte) 0xb2,
				(byte) 0xe5, (byte) 0x50, (byte) 0xbc, (byte) 0x09, (byte) 0xfe, (byte) 0x85, (byte) 0xea, (byte) 0xf4,
				(byte) 0xc5, (byte) 0x39, (byte) 0x10, (byte) 0x58, (byte) 0xff, (byte) 0xfb, (byte) 0x0b, (byte) 0xc6,
				(byte) 0x57, (byte) 0xdb, (byte) 0x85, (byte) 0xe8, (byte) 0x13, (byte) 0x0e, (byte) 0x1e, (byte) 0x77,
				(byte) 0x5d, (byte) 0xe5, (byte) 0xdc, (byte) 0x80, (byte) 0x1e, (byte) 0xba, (byte) 0xcf, (byte) 0xcb,
				(byte) 0x5b, (byte) 0x03, (byte) 0xb1, (byte) 0x07, (byte) 0x28, (byte) 0x46, (byte) 0xc3, (byte) 0x03,
				(byte) 0x7c, (byte) 0x3f, (byte) 0x7c, (byte) 0x1e, (byte) 0xc6, (byte) 0x39, (byte) 0x54, (byte) 0x61,
				(byte) 0xc9, (byte) 0x20, (byte) 0x8f, (byte) 0x1d, (byte) 0x3c, (byte) 0x5d, (byte) 0xb2, (byte) 0x6f,
				(byte) 0x03, (byte) 0x79 };

		// Group 7
		byte[] cipher7 = new byte[] { (byte) 0xfb, (byte) 0x4c, (byte) 0xec, (byte) 0x92, (byte) 0xc0, (byte) 0xd1,
				(byte) 0x09, (byte) 0x74, (byte) 0x1b, (byte) 0x3d, (byte) 0x24, (byte) 0x58, (byte) 0x2b, (byte) 0xd2,
				(byte) 0x01, (byte) 0xb2, (byte) 0x44, (byte) 0x12, (byte) 0x2e, (byte) 0x23, (byte) 0x97, (byte) 0x2d,
				(byte) 0xe6, (byte) 0x24, (byte) 0x00, (byte) 0xf2, (byte) 0x3c, (byte) 0xe4, (byte) 0x43, (byte) 0xce,
				(byte) 0x8b, (byte) 0x0a };

		// Group 8
		byte[] cipher8 = new byte[] { (byte) 0x4f, (byte) 0xc4, (byte) 0x78, (byte) 0x63, (byte) 0xf2, (byte) 0x78,
				(byte) 0xc7, (byte) 0xbb, (byte) 0xa7, (byte) 0x7b, (byte) 0x2e, (byte) 0xc9, (byte) 0x62, (byte) 0x50,
				(byte) 0x1a, (byte) 0x9f, (byte) 0xf0, (byte) 0x7b, (byte) 0x10, (byte) 0xff, (byte) 0x0a, (byte) 0x0c,
				(byte) 0xe8, (byte) 0x71, (byte) 0xcd, (byte) 0x09, (byte) 0xb8, (byte) 0xb7, (byte) 0x29, (byte) 0x13,
				(byte) 0xe1, (byte) 0x17, (byte) 0xa5, (byte) 0x7e, (byte) 0x4c, (byte) 0x27, (byte) 0x70, (byte) 0x64,
				(byte) 0x11, (byte) 0xaa, (byte) 0x30, (byte) 0xcf, (byte) 0x6c, (byte) 0xdb, (byte) 0x2c, (byte) 0x8c,
				(byte) 0x61, (byte) 0x59, (byte) 0x6d, (byte) 0x43, (byte) 0x08, (byte) 0x68, (byte) 0x37, (byte) 0x24,
				(byte) 0xb9, (byte) 0x19, (byte) 0x95, (byte) 0x80, (byte) 0x1c, (byte) 0x72, (byte) 0xa0, (byte) 0x4e,
				(byte) 0x91, (byte) 0xa1, (byte) 0x13, (byte) 0xd1, (byte) 0x37, (byte) 0xcd, (byte) 0xf8, (byte) 0x9e,
				(byte) 0x92, (byte) 0xed, (byte) 0x06, (byte) 0x39, (byte) 0xad, (byte) 0x33, (byte) 0x42, (byte) 0xbf,
				(byte) 0x4e, (byte) 0x05, (byte) 0xb2, (byte) 0x79, (byte) 0x45, (byte) 0x22, (byte) 0x27, (byte) 0x6d,
				(byte) 0x52, (byte) 0x47, (byte) 0x5e, (byte) 0xd5, (byte) 0x69, (byte) 0xfb, (byte) 0x63, (byte) 0xa9,
				(byte) 0x6b, (byte) 0xa2, (byte) 0xe9, (byte) 0xc4, (byte) 0x4e, (byte) 0x98, (byte) 0x3c, (byte) 0x98,
				(byte) 0x0c, (byte) 0xf9, (byte) 0x80, (byte) 0x9e, (byte) 0xca, (byte) 0x48, (byte) 0x8a, (byte) 0x17,
				(byte) 0x0c, (byte) 0x38 };

		// Group 9
		byte[] cipher9 = new byte[] { (byte) 0xd0, (byte) 0x46, (byte) 0x19, (byte) 0xac, (byte) 0xe0, (byte) 0x76,
				(byte) 0xde, (byte) 0xb6, (byte) 0xe7, (byte) 0xa2, (byte) 0x75, (byte) 0x9c, (byte) 0x53, (byte) 0x14,
				(byte) 0x58, (byte) 0x75, (byte) 0x40, (byte) 0xa5, (byte) 0x3a, (byte) 0xa8, (byte) 0xeb, (byte) 0xfc,
				(byte) 0xb1, (byte) 0x76, (byte) 0x51, (byte) 0x2d, (byte) 0x9e, (byte) 0xcb, (byte) 0x72, (byte) 0x01,
				(byte) 0x14, (byte) 0x21, (byte) 0x09, (byte) 0x2f, (byte) 0x66, (byte) 0x26, (byte) 0x4e, (byte) 0x83,
				(byte) 0x28, (byte) 0xa1, (byte) 0x27, (byte) 0x14, (byte) 0xa1, (byte) 0x82, (byte) 0x22, (byte) 0x00,
				(byte) 0xbe, (byte) 0xfd, (byte) 0xe2, (byte) 0x44, (byte) 0x07, (byte) 0x88, (byte) 0x06, (byte) 0xa4,
				(byte) 0x10, (byte) 0xc8, (byte) 0x73, (byte) 0xd5, (byte) 0xf9, (byte) 0x43, (byte) 0x26, (byte) 0xd2,
				(byte) 0xcc, (byte) 0x53 };

		// Group 10
		byte[] cipher10 = new byte[] { (byte) 0x75, (byte) 0x8C, (byte) 0xBC, (byte) 0x69, (byte) 0x61, (byte) 0xF4,
				(byte) 0x40, (byte) 0x0E, (byte) 0x93, (byte) 0x72, (byte) 0x57, (byte) 0x43, (byte) 0x9F, (byte) 0xBE,
				(byte) 0xD9, (byte) 0x36, (byte) 0xEB, (byte) 0x47, (byte) 0x42, (byte) 0x0D, (byte) 0xC1, (byte) 0x2E,
				(byte) 0x18, (byte) 0x06, (byte) 0x74, (byte) 0xF8, (byte) 0x72, (byte) 0xAC, (byte) 0x15, (byte) 0x56,
				(byte) 0xCD, (byte) 0x8E };

		// Group 11
		byte[] cipher11 = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x00, (byte) 0x00 };

		cipherTexts.add(cipher1);
		cipherTexts.add(cipher2);
		cipherTexts.add(cipher3);
		cipherTexts.add(cipher4);
		cipherTexts.add(cipher5);
		cipherTexts.add(cipher6);
		cipherTexts.add(cipher7);
		cipherTexts.add(cipher8);
		cipherTexts.add(cipher9);
		cipherTexts.add(cipher10);
		cipherTexts.add(cipher11);

		SecretKeySpec[] decodeKeys = new SecretKeySpec[NUMBER_OF_GROUPS];

		for (int i = 0; i < decodeKeyBytes.size(); i++) {
			decodeKeys[i] = new SecretKeySpec(decodeKeyBytes.get(i), "AES");
		}

		ctLength = 0;
		ptLength = 0;
		for (int i = 0; i < decodeKeyBytes.size(); i++) {
			// decryption pass
			byte[] cipherText = cipherTexts.get(i);
			ctLength = cipherText.length;
			byte[] plainText = new byte[ctLength];
			cipher.init(Cipher.DECRYPT_MODE, decodeKeys[i]);
			ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);
			ptLength += cipher.doFinal(plainText, ptLength);
			StringBuilder ascii = toAscii(Utils.toHex(plainText));
			System.out.println("plain text from " + groups[i] + ": " + ascii);
		}
	}

	public static StringBuilder toAscii(String hex) {
		StringBuilder output = new StringBuilder();
		for (int i = 0; i < hex.length(); i += 2) {
			String str = hex.substring(i, i + 2);
			output.append((char) Integer.parseInt(str, 16));
		}
		return output;
	}
}
